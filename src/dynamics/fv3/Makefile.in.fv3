########################################################################
#
# The Makefile for building the FV3 library is created by CAM's configure
# using this template and prepending the following macros:
#
# The macro CAM_BLD is also prepended.  It is the build directory of the CAM
# code and it contains the abortutils.mod file.  The abortutils module is
# referenced by FV3 code in order to perform an abort which is appropriate
# for the CESM system.
#
# The main customization required for the library to link with CAM is to
# use autopromotion of the default real type to real*8.  This is required
# in most, though not all, of the FV3 files.  Also, some compilers require
# special flags to specify fixed or free format source (rather than depend
# on filename extensions).  Thus, the explicit rules at the end of this
# template for compiling FV3 files have been modified to allow different
# sets of flags for 1) files that cannot be compiled with autopromotion,
# and 2) files that use fixed format source.
#
# The generated Makefile will be used by a sub-Make issued from CAM's Make.
# The sub-Make will inherit the macros:
#
# FC           name of Fortran90 compiler
# FC_FLAGS     Fortran compiler flags
#
########################################################################
AR	:= ar
RM	:= rm
CP	:= cp

# Load dependency search path.
cpp_dirs := .
cpp_dirs += $(shell cat Filepath)

# Create VPATH from Filepath file created by CAM configure
# Expand any tildes in directory names. Change spaces to colons.
VPATH := $(foreach dir,$(cpp_dirs),$(wildcard $(dir)))
VPATH := $(subst $(space),:,$(VPATH))

F90      := $(FC)
C90      := $(CC)
F90FLAGS := $(FREEFLAGS) $(FFLAGS)

# Additional GNU flags needed for FV3
ifeq ($(strip $(COMPILER)),gnu)
  F90FLAGS += -fcray-pointer
endif

complib:  $(COMPLIB) Depends

#-------------------------------------------------------------------------------
# Build & include dependency files
#-------------------------------------------------------------------------------

touch_filepath:
	touch Filepath

# Get list of files and build dependency file for all .o files
#   using perl scripts mkSrcfiles and mkDepends
# if a source is of form .F90.in strip the .in before creating the list of objects

SKIPFILES := fv_iau_mod.F90
SOURCES := $(filter-out $(SKIPFILES), $(shell cat Srcfiles))
BASENAMES := $(basename $(basename $(SOURCES)))
OBJS    := $(addsuffix .o, $(BASENAMES))
INCS    := $(foreach dir,$(cpp_dirs),-I$(dir))

CURDIR := $(shell pwd)

Depends: Srcfiles Deppath
	$(CASETOOLS)/mkDepends $(USER_MKDEPENDS_OPTS) Deppath Srcfiles > $@

Deppath: Filepath
	$(CP) -f Filepath $@
	@echo "$(MINCROOT)" >> $@

Srcfiles: Filepath
	$(CASETOOLS)/mkSrcfiles

#-------------------------------------------------------------------------------

db_files:
	@echo " "
	@echo "* VPATH   := $(VPATH)"
db_flags:
	@echo " "
	@echo "* cc      := $(CC) $(CFLAGS) $(INCLDIR) $(INCS)"
	@echo "* .F.o    := $(FC) $(F90FLAGS) $(INCLDIR) $(INCS)"

#-------------------------------------------------------------------------------
# build rules:
#-------------------------------------------------------------------------------
.SUFFIXES:
.SUFFIXES: .F90 .F .f90 .f .c .cpp .o .in

ifdef INCLUDE_DIR
  $(COMPLIB): $(OBJS)
	@echo "* OBJS   := $(OBJS)"
	$(AR) -r $(COMPLIB) $(OBJS)
	$(CP) *.$(MOD_SUFFIX) *.h $(INCLUDE_DIR)
else
  $(COMPLIB): $(OBJS)
	@echo "* OBJS   := $(OBJS)"
	$(AR) -r $(COMPLIB) $(OBJS)
endif

#-------------------------------------------------------------------------------
# Rules for gnu specific compiler directives for FV3 library code
#-------------------------------------------------------------------------------

ifeq ($(FC_TYPE), gnu)
fv_arrays.o: fv_arrays.F90
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS)  -fno-range-check $<

fv_regional_bc.o: fv_regional_bc.F90
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS) -fno-range-check $<

gfdl_cloud_microphys.o: gfdl_cloud_microphys.F90
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS) -fdec $<

module_mp_radar.o: module_mp_radar.F90
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS) -fdec $<
endif

.c.o:
	$(CC) -c $(INCLDIR) $(INCS) $(CFLAGS) $(CPPDEFS) $<
.F.o:
	$(F90) -c $(INCLDIR) $(INCS) $(FFLAGS) $(FIXEDFLAGS) $<
.f.o:
	$(F90) -c $(INCLDIR) $(INCS) $(FFLAGS) $(FIXEDFLAGS) $<
.f90.o:
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS) $<
.F90.o:
	$(F90) -c $(INCLDIR) $(INCS) $(F90FLAGS) $(CONTIGUOUS_FLAG) $<
.cpp.o:
	$(CXX) -c $(INCLDIR) $(INCS) $(CXXFLAGS)  $<

%.F90: %.F90.in
	$(CIMEROOT)/src/externals/genf90/genf90.pl $< > $@

clean_objs:
	rm -f $(OBJS) *.mod *.o

clean:
	rm -f $(COMPLIB) $(OBJS) *.mod *.o

# the if-tests prevent DEPS files from being created when they're not needed
ifneq ($(MAKECMDGOALS), db_files)
ifneq ($(MAKECMDGOALS), db_flags)
ifeq (,$(findstring clean,$(MAKECMDGOALS)))
    -include Depends $(CASEROOT)/Depends.$(COMPILER) $(CASEROOT)/Depends.$(MACH) $(CASEROOT)/Depends.$(MACH).$(COMPILER)
endif
endif
endif
